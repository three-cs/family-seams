name: terraform
on:
  workflow_dispatch: {}
  push:
    branches:
      - '**'
    paths-ignore:
      - 'lerna.json'
      - 'package.json'
      - 'package-lock.json'
      - 'packages/*/package.json'
      - 'packages/*/package-lock.json'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        application: [api, web]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
          
      - uses: mstachniuk/ci-skip@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Node Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install
        run: |
          npm ci
          npm run lerna -- exec npm ci

      - name: Set Vars
        id: vars
        run: |
          echo "::set-output name=version::$(node -p require('./package.json').version)"

      - name: Docker Setup
        uses: docker/setup-buildx-action@v1

      - name: Docker Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./packages/${{ matrix.application }}
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            ${{ secrets.ECR_REPOSITORY_URL }}/family-seams/${{ matrix.application }}:latest
            ${{ secrets.ECR_REPOSITORY_URL }}/family-seams/${{ matrix.application }}:${{ steps.vars.outputs.version }}
            ${{ secrets.ECR_REPOSITORY_URL }}/family-seams/${{ matrix.application }}:github-run-${{ github.run_number }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: mstachniuk/ci-skip@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TERRAFORM_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.6

      - name: Initialization Terraform
        run: |
          cd $GITHUB_WORKSPACE/terraform/init
          terraform init
          if ! terraform state show aws_s3_bucket.terraform_bucket > /dev/null 2>&1 && aws s3api get-bucket-versioning --bucket family-seams-terraform-bucket > /dev/null; then
            terraform import aws_s3_bucket.terraform_bucket family-seams-terraform-bucket
          fi
          terraform apply -auto-approve

      - name: Global Terraform
        run: |
          cd $GITHUB_WORKSPACE/terraform/global
          terraform init -reconfigure -backend-config="bucket=family-seams-terraform-bucket"
          terraform apply -auto-approve

      - name: Environment Terraform
        run: |
          cd $GITHUB_WORKSPACE/terraform/environment
          terraform init -reconfigure -backend-config="bucket=family-seams-terraform-bucket"

          if ! terraform workspace select production; then
            terraform workspace new production
          fi

          terraform apply -auto-approve

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: v1.19.3

      - name: Post Kubernetes Terraform
        run: |
          cd $GITHUB_WORKSPACE/terraform/post-kubernetes

          aws eks update-kubeconfig --name family-seams-production
          export KUBE_CONFIG_PATH=/home/runner/.kube/config
          
          terraform init -reconfigure -backend-config="bucket=family-seams-terraform-bucket"

          if ! terraform workspace select production; then
            terraform workspace new production
          fi

          terraform apply -auto-approve

  deploy-application:
    name: Deploy Application
    needs: deploy
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        application: [api, web]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: mstachniuk/ci-skip@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TERRAFORM_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.6

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: v1.19.3

      - name: Application Terraform - ${{ matrix.application }}
        run: |
          cd $GITHUB_WORKSPACE/packages/${{ matrix.application }}/terraform

          aws eks update-kubeconfig --name family-seams-production
          export KUBE_CONFIG_PATH=/home/runner/.kube/config

          terraform init -reconfigure -backend-config="bucket=family-seams-terraform-bucket"

          if ! terraform workspace select production; then
            terraform workspace new production
          fi

          terraform apply -auto-approve

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: deploy-application
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - uses: mstachniuk/ci-skip@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Node Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install
        run: |
          npm ci
          npm run lerna -- exec npm ci

      - name: Version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          npm --no-git-tag-version version patch
          git add .
          git commit -m "Update root package.json version."
          
          npm run lerna -- version patch --force-publish
          git push origin
